import os
import sys
import re
import pandas as pd


def main(input_dir, output_dir):
    pattern_zotutab = re.compile(r"^(NBCLAB\d+?)_zotutab.txt$")
    df_trunc_mapping = pd.DataFrame(columns=['srr_name', 'zotu_id', 'trunc_mapping'])

    df_filter_mapping_trunc = pd.DataFrame(columns=['srr_name', 'zotu_id', 'passed_abun', 'passed_contam'])
    df_filter_mapping_full = pd.DataFrame(columns=['srr_name', 'zotu_id', 'passed_abun', 'passed_contam'])
    df_filter_mapping = {"": df_filter_mapping_trunc, "_full": df_filter_mapping_full}

    for suffix in df_filter_mapping:
        zotus_dir = os.path.join(input_dir, f"ZOTUS{suffix}")
        for filename in sorted(os.listdir(zotus_dir)):
            match = pattern_zotutab.match(filename)
            if match:
                srr_name = match.groups()[0]

                zotutab_path = os.path.join(zotus_dir, filename)
                df_zotutab = pd.read_csv(zotutab_path, sep="\t", usecols=[0], index_col="#OTU ID")

                abun_path = os.path.join(zotus_dir, 'abundant', f"{srr_name}_zotutab_af.txt")
                contam_path = os.path.join(input_dir, f"FINAL{suffix}", f"{srr_name}_zotutab_final.txt")
                df_abun = pd.read_csv(abun_path, sep="\t", usecols=[0], index_col="#OTU ID")
                df_abun['passed_abun'] = True
                df_contam = pd.read_csv(contam_path, sep="\t", usecols=[0], index_col="#OTU ID")
                df_contam['passed_contam'] = True

                if suffix == "":
                    trunc_mapping_path = os.path.join(zotus_dir, f"{srr_name}_zotus_trunc_mapping.txt")
                    df_trunc = pd.read_csv(trunc_mapping_path, sep="\t", usecols=[
                                           0, 1], names=["zotu_id", "trunc_mapping"], index_col="zotu_id")
                    # df_trunc_mapping = pd.concat([df_trunc_mapping, df_trunc])
                    df_trunc['passed_trunc'] = True

                df_merged = df_zotutab.join(df_abun).astype('boolean').fillna(False)
                df_merged = df_merged.join(df_contam).astype('boolean').fillna(False)

    df_trunc_mapping.to_csv(os.path.join(output_dir, "truncate_mapping.csv"))


if __name__ == "__main__":
    input_dir = sys.argv[1]
    output_dir = os.path.join("output_tables", os.path.basename(input_dir))
    os.makedirs(output_dir, exist_ok=True)

    main(input_dir, output_dir)
